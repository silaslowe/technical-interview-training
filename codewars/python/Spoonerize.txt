A spoonerism is a spoken phrase in which the first letters of two of the words are swapped around, often with amusing results.

In its most basic form a spoonerism is a two word phrase in which only the first letters of each word are swapped:

"not picking" --> "pot nicking"

Your task is to create a function that takes a string of two words, separated by a space: words and returns a spoonerism of those words in a string, as in the above example.

NOTE: All input strings will contain only two words. Spoonerisms can be more complex. For example, three-word phrases in which the first letters of the first and last words are swapped: "pack of lies" --> "lack of pies" or more than one letter from a word is swapped: "flat battery --> "bat flattery" You are NOT expected to account for these, or any other nuances involved in spoonerisms.

My Solution:

def spoonerize(words):
    s = words.split(" ")
    f_w =  [char for char in s[0]]
    s_w =  [char for char in s[1]]
    f_w_p = f_w.pop(0)
    s_w_p = s_w.pop(0)
    fw = f_w.insert(0, s_w_p)
    sw = s_w.insert(0, f_w_p)
    f_w = "".join(f_w)
    s_w = "".join(s_w)
    return(f"{f_w} {s_w}")

Other Solutions:

def spoonerize(words):
    a, b = words.split()
    return '{}{} {}{}'.format(b[0], a[1:], a[0], b[1:])